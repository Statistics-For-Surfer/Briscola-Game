psi_hat_ <- psi_hat(x)
tau_boot <- c(tau_boot ,1 / ( 1 + psi_hat_)  )
m <- c(m , mean(x))
}
hist(tau_boot)
hist(m)
par(mfrow=c(1,2))
hist(tau_boot, col = "cyan4")
hist(m)
hist(m , col = "yellow")
par(mfrow=c(1,2))
hist(tau_boot, col = "cyan4")
hist(m , col = "yellow")
box()
par(mfrow=c(1,2))
hist(tau_boot, col = "cyan4")
box()
hist(m , col = "yellow")
box()
par(mfrow=c(1,2))
hist(tau_boot, col = "cyan4" , main = "Boot histogram of tau")
box()
hist(m , col = "yellow", main = "Boot histogram of average ")
box()
sd(tau_boot)
sd(m)
sd(tau_boot)
sd(m)
L <- tau_hat_1 - qnorm(0.975) * sd(tau_boot)
U <- tau_hat_1 - qnorm(0.975) * sd(tau_boot)
L <- tau_hat_1 + qnorm(0.975) * sd(tau_boot)
###########
##NON-PARAMETRIC BOOTSTRAP
###########
for (i in 1:B ) {
x <- sample(n , samp_1 , replace = T )
psi_hat_ <- psi_hat(x)
tau_boot <- c(tau_boot ,1 / ( 1 + psi_hat_)  )
m <- c(m , mean(x))
}
par(mfrow=c(1,2))
hist(tau_boot, col = "cyan4" , main = "Boot histogram of tau")
box()
hist(m , col = "yellow", main = "Boot histogram of average ")
box()
sd(m)
sample(n , samp_1 , replace = T )
x <- sample(n , samp_1 , replace = T )
x
samp_1
x <- sample(n , samp_1 , replace = T )
x
x <- sample( samp_1 ,n , replace = T )
x
###########
##NON-PARAMETRIC BOOTSTRAP
###########
for (i in 1:B ) {
x <- sample( samp_1 ,n , replace = T )
psi_hat_ <- psi_hat(x)
tau_boot <- c(tau_boot ,1 / ( 1 + psi_hat_)  )
m <- c(m , mean(x))
}
par(mfrow=c(1,2))
hist(tau_boot, col = "cyan4" , main = "Boot histogram of tau")
box()
hist(m , col = "yellow", main = "Boot histogram of average ")
box()
U <- tau_hat_1 - qnorm(0.975) * sd(tau_boot)
L <- tau_hat_1 + qnorm(0.975) * sd(tau_boot)
U
L
x <- sample( samp_1 ,n , replace = T )
x
psi_hat_ <- psi_hat(x)
psi_hat_
###########
##NON-PARAMETRIC BOOTSTRAP
###########
tau_boot <- c()
m <- c()
for (i in 1:B ) {
x <- sample( samp_1 ,n , replace = T )
psi_hat_ <- psi_hat(x)
tau_boot <- c(tau_boot ,1 / ( 1 + psi_hat_)  )
m <- c(m , mean(x))
}
par(mfrow=c(1,2))
hist(tau_boot, col = "cyan4" , main = "Boot histogram of tau")
box()
hist(m , col = "yellow", main = "Boot histogram of average ")
box()
U <- tau_hat_1 - qnorm(0.975) * sd(tau_boot)
L <- tau_hat_1 + qnorm(0.975) * sd(tau_boot)
U
L
B <- 1000
n <- length(samp_1)
m <- c()
tau_boot <- c()
for (i in 1:B ) {
x <- rbeta(n , shape1 = 1 , shape2 = psi_hat_1)
psi_hat_ <- psi_hat(x)
tau_boot <- c(tau_boot ,1 / ( 1 + psi_hat_)  )
m <- c(m , mean(x))
}
par(mfrow=c(1,2))
hist(tau_boot, col = "cyan4" , main = "Boot histogram of tau")
box()
hist(m , col = "yellow", main = "Boot histogram of average ")
box()
sd(m)
U <- tau_hat_1 - qnorm(0.975) * sd(tau_boot)
L <- tau_hat_1 + qnorm(0.975) * sd(tau_boot)
U
L
U <- tau_hat_1 - qnorm(0.95) * sd(tau_boot)
L <- tau_hat_1 + qnorm(0.95) * sd(tau_boot)
U
L
B <- 1000
n <- length(samp_1)
m <- c()
tau_boot <- c()
for (i in 1:B ) {
x <- rbeta(n , shape1 = 1 , shape2 = psi_hat_1)
psi_hat_ <- psi_hat(x)
tau_boot <- c(tau_boot ,1 / ( 1 + psi_hat_)  )
m <- c(m , mean(x))
}
par(mfrow=c(1,2))
hist(tau_boot, col = "cyan4" , main = "Boot histogram of tau")
box()
hist(m , col = "yellow", main = "Boot histogram of average ")
box()
sd(m)
U <- tau_hat_1 - qnorm(0.975) * sd(tau_boot)
L <- tau_hat_1 + qnorm(0.975) * sd(tau_boot)
U
L
B <- 1000
n <- length(samp_1)
m <- c()
tau_boot <- c()
set.seed(123)
for (i in 1:B ) {
x <- rbeta(n , shape1 = 1 , shape2 = psi_hat_1)
psi_hat_ <- psi_hat(x)
tau_boot <- c(tau_boot ,1 / ( 1 + psi_hat_)  )
}
par(mfrow=c(1,2))
hist(tau_boot, col = "cyan4" , main = "Boot histogram of tau")
box()
sd(m)
U <- tau_hat_1 - qnorm(0.95) * sd(tau_boot)
L <- tau_hat_1 + qnorm(0.95) * sd(tau_boot)
U
L
###########
##NON-PARAMETRIC BOOTSTRAP
###########
tau_boot <- c()
m <- c()
###########
##NON-PARAMETRIC BOOTSTRAP
###########
tau_boot <- c()
m <- c()
for (i in 1:B ) {
x <- sample( samp_1 ,n , replace = T )
psi_hat_ <- psi_hat(x)
tau_boot <- c(tau_boot ,1 / ( 1 + psi_hat_)  )
m <- c(m , mean(x))
}
hist(tau_boot, col = "cyan4" , main = "Boot histogram of tau")
U <- tau_hat_1 - qnorm(0.95) * sd(tau_boot)
L <- tau_hat_1 + qnorm(0.95) * sd(tau_boot)
hist(tau_boot, col = "yellow" , main = "Boot histogram of tau")
U <- tau_hat_1 - qnorm(0.95) * sd(tau_boot)
L <- tau_hat_1 + qnorm(0.95) * sd(tau_boot)
U
L
B <- 1000
n <- length(samp_1)
m <- c()
tau_boot <- c()
set.seed(123)
for (i in 1:B ) {
x <- rbeta(n , shape1 = 1 , shape2 = psi_hat_1)
psi_hat_ <- psi_hat(x)
tau_boot <- c(tau_boot ,1 / ( 1 + psi_hat_)  )
}
par(mfrow=c(1,2))
hist(tau_boot, col = "cyan4" , main = "Boot histogram of tau")
box()
sd(m)
U <- tau_hat_1 - qnorm(0.95) * sd(tau_boot)
L <- tau_hat_1 + qnorm(0.95) * sd(tau_boot)
U
L
###########
##NON-PARAMETRIC BOOTSTRAP
###########
tau_boot <- c()
m <- c()
for (i in 1:B ) {
x <- sample( samp_1 ,n , replace = T )
psi_hat_ <- psi_hat(x)
tau_boot <- c(tau_boot ,1 / ( 1 + psi_hat_)  )
m <- c(m , mean(x))
}
hist(tau_boot, col = "yellow" , main = "Boot histogram of tau")
U <- tau_hat_1 - qnorm(0.95) * sd(tau_boot)
L <- tau_hat_1 + qnorm(0.95) * sd(tau_boot)
U
L
library(tidyverse)
?tidyverse
?tidyerse
?tidyverse
install.packages("tidyverse")
library(tidyverse)
install.packages("scales")
library(tidyverse)
install.packages(rlang)
install.packages(c("BH", "bit", "boot", "broom", "bslib", "callr", "car", "checkmate", "class", "classInt", "codetools", "colorspace", "cpp11", "crayon", "curl", "data.table", "DBI", "dendextend", "desc", "DescTools", "deSolve", "digest", "DT", "e1071", "Ecdat", "Ecfun", "ellipse", "evaluate", "Exact", "expm", "extrafont", "FactoMineR", "fansi", "farver", "fishmethods", "flexmix", "fontawesome", "foreign", "fpc", "fs", "gdtools", "generics", "ggplot2", "ggpubr", "ggrepel", "ggsignif", "gld", "gtable", "highr", "Hmisc", "htmlTable", "htmlwidgets", "httpuv", "isoband", "jpeg", "jsonlite", "kernlab", "knitr", "ks", "latticeExtra", "lme4", "lmom", "locfit", "lpSolve", "magrittr", "maptools", "markdown", "MASS", "Matrix", "MatrixModels", "mgcv", "minqa", "nlme", "nloptr", "nnet", "openssl", "pbkrtest", "pcaPP", "pillar", "pkgload", "plyr", "png", "pracma", "processx", "proxy", "ps", "quantreg", "rainbow", "raster", "Rcapture", "Rcpp", "RcppEigen", "RcppParallel", "RCurl", "rgl", "rmarkdown", "RNifti", "rpart", "rpart.plot", "rprojroot", "rrcov", "rstatix", "rstudioapi", "Rttf2pt1", "s2", "sass", "scatterplot3d", "secr", "sf", "sourcetools", "sp", "spatial", "stringi", "stringr", "survival", "sys", "terra", "testthat", "tibble", "tidyr", "tinytex", "units", "utf8", "viridisLite", "vroom", "wk", "xfun", "XML", "yaml", "zoo"))
install.packages(c("BH", "bit", "boot", "broom", "bslib", "callr", "car", "checkmate", "class", "classInt", "codetools", "colorspace", "cpp11", "crayon", "curl", "data.table", "DBI", "dendextend", "desc", "DescTools", "deSolve", "digest", "DT", "e1071", "Ecdat", "Ecfun", "ellipse", "evaluate", "Exact", "expm", "extrafont", "FactoMineR", "fansi", "farver", "fishmethods", "flexmix", "fontawesome", "foreign", "fpc", "fs", "gdtools", "generics", "ggplot2", "ggpubr", "ggrepel", "ggsignif", "gld", "gtable", "highr", "Hmisc", "htmlTable", "htmlwidgets", "httpuv", "isoband", "jpeg", "jsonlite", "kernlab", "knitr", "ks", "latticeExtra", "lme4", "lmom", "locfit", "lpSolve", "magrittr", "maptools", "markdown", "MASS", "Matrix", "MatrixModels", "mgcv", "minqa", "nlme", "nloptr", "nnet", "openssl", "pbkrtest", "pcaPP", "pillar", "pkgload", "plyr", "png", "pracma", "processx", "proxy", "ps", "quantreg", "rainbow", "raster", "Rcapture", "Rcpp", "RcppEigen", "RcppParallel", "RCurl", "rgl", "rmarkdown", "RNifti", "rpart", "rpart.plot", "rprojroot", "rrcov", "rstatix", "rstudioapi", "Rttf2pt1", "s2", "sass", "scatterplot3d", "secr", "sf", "sourcetools", "sp", "spatial", "stringi", "stringr", "survival", "sys", "terra", "testthat", "tibble", "tidyr", "tinytex", "units", "utf8", "viridisLite", "vroom", "wk", "xfun", "XML", "yaml", "zoo"))
install.packages(c("BH", "bit", "boot", "broom", "bslib", "callr", "car", "checkmate", "class", "classInt", "codetools", "colorspace", "cpp11", "crayon", "curl", "data.table", "DBI", "dendextend", "desc", "DescTools", "deSolve", "digest", "DT", "e1071", "Ecdat", "Ecfun", "ellipse", "evaluate", "Exact", "expm", "extrafont", "FactoMineR", "fansi", "farver", "fishmethods", "flexmix", "fontawesome", "foreign", "fpc", "fs", "gdtools", "generics", "ggplot2", "ggpubr", "ggrepel", "ggsignif", "gld", "gtable", "highr", "Hmisc", "htmlTable", "htmlwidgets", "httpuv", "isoband", "jpeg", "jsonlite", "kernlab", "knitr", "ks", "latticeExtra", "lme4", "lmom", "locfit", "lpSolve", "magrittr", "maptools", "markdown", "MASS", "Matrix", "MatrixModels", "mgcv", "minqa", "nlme", "nloptr", "nnet", "openssl", "pbkrtest", "pcaPP", "pillar", "pkgload", "plyr", "png", "pracma", "processx", "proxy", "ps", "quantreg", "rainbow", "raster", "Rcapture", "Rcpp", "RcppEigen", "RcppParallel", "RCurl", "rgl", "rmarkdown", "RNifti", "rpart", "rpart.plot", "rprojroot", "rrcov", "rstatix", "rstudioapi", "Rttf2pt1", "s2", "sass", "scatterplot3d", "secr", "sf", "sourcetools", "sp", "spatial", "stringi", "stringr", "survival", "sys", "terra", "testthat", "tibble", "tidyr", "tinytex", "units", "utf8", "viridisLite", "vroom", "wk", "xfun", "XML", "yaml", "zoo"))
install.packages(c("BH", "bit", "boot", "broom", "bslib", "callr", "car", "checkmate", "class", "classInt", "codetools", "colorspace", "cpp11", "crayon", "curl", "data.table", "DBI", "dendextend", "desc", "DescTools", "deSolve", "digest", "DT", "e1071", "Ecdat", "Ecfun", "ellipse", "evaluate", "Exact", "expm", "extrafont", "FactoMineR", "fansi", "farver", "fishmethods", "flexmix", "fontawesome", "foreign", "fpc", "fs", "gdtools", "generics", "ggplot2", "ggpubr", "ggrepel", "ggsignif", "gld", "gtable", "highr", "Hmisc", "htmlTable", "htmlwidgets", "httpuv", "isoband", "jpeg", "jsonlite", "kernlab", "knitr", "ks", "latticeExtra", "lme4", "lmom", "locfit", "lpSolve", "magrittr", "maptools", "markdown", "MASS", "Matrix", "MatrixModels", "mgcv", "minqa", "nlme", "nloptr", "nnet", "openssl", "pbkrtest", "pcaPP", "pillar", "pkgload", "plyr", "png", "pracma", "processx", "proxy", "ps", "quantreg", "rainbow", "raster", "Rcapture", "Rcpp", "RcppEigen", "RcppParallel", "RCurl", "rgl", "rmarkdown", "RNifti", "rpart", "rpart.plot", "rprojroot", "rrcov", "rstatix", "rstudioapi", "Rttf2pt1", "s2", "sass", "scatterplot3d", "secr", "sf", "sourcetools", "sp", "spatial", "stringi", "stringr", "survival", "sys", "terra", "testthat", "tibble", "tidyr", "tinytex", "units", "utf8", "viridisLite", "vroom", "wk", "xfun", "XML", "yaml", "zoo"))
install.packages(c("BH", "bit", "boot", "broom", "bslib", "callr", "car", "checkmate", "class", "classInt", "codetools", "colorspace", "cpp11", "crayon", "curl", "data.table", "DBI", "dendextend", "desc", "DescTools", "deSolve", "digest", "DT", "e1071", "Ecdat", "Ecfun", "ellipse", "evaluate", "Exact", "expm", "extrafont", "FactoMineR", "fansi", "farver", "fishmethods", "flexmix", "fontawesome", "foreign", "fpc", "fs", "gdtools", "generics", "ggplot2", "ggpubr", "ggrepel", "ggsignif", "gld", "gtable", "highr", "Hmisc", "htmlTable", "htmlwidgets", "httpuv", "isoband", "jpeg", "jsonlite", "kernlab", "knitr", "ks", "latticeExtra", "lme4", "lmom", "locfit", "lpSolve", "magrittr", "maptools", "markdown", "MASS", "Matrix", "MatrixModels", "mgcv", "minqa", "nlme", "nloptr", "nnet", "openssl", "pbkrtest", "pcaPP", "pillar", "pkgload", "plyr", "png", "pracma", "processx", "proxy", "ps", "quantreg", "rainbow", "raster", "Rcapture", "Rcpp", "RcppEigen", "RcppParallel", "RCurl", "rgl", "rmarkdown", "RNifti", "rpart", "rpart.plot", "rprojroot", "rrcov", "rstatix", "rstudioapi", "Rttf2pt1", "s2", "sass", "scatterplot3d", "secr", "sf", "sourcetools", "sp", "spatial", "stringi", "stringr", "survival", "sys", "terra", "testthat", "tibble", "tidyr", "tinytex", "units", "utf8", "viridisLite", "vroom", "wk", "xfun", "XML", "yaml", "zoo"))
install.packages(c("BH", "bit", "boot", "broom", "bslib", "callr", "car", "checkmate", "class", "classInt", "codetools", "colorspace", "cpp11", "crayon", "curl", "data.table", "DBI", "dendextend", "desc", "DescTools", "deSolve", "digest", "DT", "e1071", "Ecdat", "Ecfun", "ellipse", "evaluate", "Exact", "expm", "extrafont", "FactoMineR", "fansi", "farver", "fishmethods", "flexmix", "fontawesome", "foreign", "fpc", "fs", "gdtools", "generics", "ggplot2", "ggpubr", "ggrepel", "ggsignif", "gld", "gtable", "highr", "Hmisc", "htmlTable", "htmlwidgets", "httpuv", "isoband", "jpeg", "jsonlite", "kernlab", "knitr", "ks", "latticeExtra", "lme4", "lmom", "locfit", "lpSolve", "magrittr", "maptools", "markdown", "MASS", "Matrix", "MatrixModels", "mgcv", "minqa", "nlme", "nloptr", "nnet", "openssl", "pbkrtest", "pcaPP", "pillar", "pkgload", "plyr", "png", "pracma", "processx", "proxy", "ps", "quantreg", "rainbow", "raster", "Rcapture", "Rcpp", "RcppEigen", "RcppParallel", "RCurl", "rgl", "rmarkdown", "RNifti", "rpart", "rpart.plot", "rprojroot", "rrcov", "rstatix", "rstudioapi", "Rttf2pt1", "s2", "sass", "scatterplot3d", "secr", "sf", "sourcetools", "sp", "spatial", "stringi", "stringr", "survival", "sys", "terra", "testthat", "tibble", "tidyr", "tinytex", "units", "utf8", "viridisLite", "vroom", "wk", "xfun", "XML", "yaml", "zoo"))
install.packages(c("BH", "bit", "boot", "broom", "bslib", "callr", "car", "checkmate", "class", "classInt", "codetools", "colorspace", "cpp11", "crayon", "curl", "data.table", "DBI", "dendextend", "desc", "DescTools", "deSolve", "digest", "DT", "e1071", "Ecdat", "Ecfun", "ellipse", "evaluate", "Exact", "expm", "extrafont", "FactoMineR", "fansi", "farver", "fishmethods", "flexmix", "fontawesome", "foreign", "fpc", "fs", "gdtools", "generics", "ggplot2", "ggpubr", "ggrepel", "ggsignif", "gld", "gtable", "highr", "Hmisc", "htmlTable", "htmlwidgets", "httpuv", "isoband", "jpeg", "jsonlite", "kernlab", "knitr", "ks", "latticeExtra", "lme4", "lmom", "locfit", "lpSolve", "magrittr", "maptools", "markdown", "MASS", "Matrix", "MatrixModels", "mgcv", "minqa", "nlme", "nloptr", "nnet", "openssl", "pbkrtest", "pcaPP", "pillar", "pkgload", "plyr", "png", "pracma", "processx", "proxy", "ps", "quantreg", "rainbow", "raster", "Rcapture", "Rcpp", "RcppEigen", "RcppParallel", "RCurl", "rgl", "rmarkdown", "RNifti", "rpart", "rpart.plot", "rprojroot", "rrcov", "rstatix", "rstudioapi", "Rttf2pt1", "s2", "sass", "scatterplot3d", "secr", "sf", "sourcetools", "sp", "spatial", "stringi", "stringr", "survival", "sys", "terra", "testthat", "tibble", "tidyr", "tinytex", "units", "utf8", "viridisLite", "vroom", "wk", "xfun", "XML", "yaml", "zoo"))
install.packages(c("BH", "bit", "boot", "broom", "bslib", "callr", "car", "checkmate", "class", "classInt", "codetools", "colorspace", "cpp11", "crayon", "curl", "data.table", "DBI", "dendextend", "desc", "DescTools", "deSolve", "digest", "DT", "e1071", "Ecdat", "Ecfun", "ellipse", "evaluate", "Exact", "expm", "extrafont", "FactoMineR", "fansi", "farver", "fishmethods", "flexmix", "fontawesome", "foreign", "fpc", "fs", "gdtools", "generics", "ggplot2", "ggpubr", "ggrepel", "ggsignif", "gld", "gtable", "highr", "Hmisc", "htmlTable", "htmlwidgets", "httpuv", "isoband", "jpeg", "jsonlite", "kernlab", "knitr", "ks", "latticeExtra", "lme4", "lmom", "locfit", "lpSolve", "magrittr", "maptools", "markdown", "MASS", "Matrix", "MatrixModels", "mgcv", "minqa", "nlme", "nloptr", "nnet", "openssl", "pbkrtest", "pcaPP", "pillar", "pkgload", "plyr", "png", "pracma", "processx", "proxy", "ps", "quantreg", "rainbow", "raster", "Rcapture", "Rcpp", "RcppEigen", "RcppParallel", "RCurl", "rgl", "rmarkdown", "RNifti", "rpart", "rpart.plot", "rprojroot", "rrcov", "rstatix", "rstudioapi", "Rttf2pt1", "s2", "sass", "scatterplot3d", "secr", "sf", "sourcetools", "sp", "spatial", "stringi", "stringr", "survival", "sys", "terra", "testthat", "tibble", "tidyr", "tinytex", "units", "utf8", "viridisLite", "vroom", "wk", "xfun", "XML", "yaml", "zoo"))
install.packages(c("BH", "bit", "boot", "broom", "bslib", "callr", "car", "checkmate", "class", "classInt", "codetools", "colorspace", "cpp11", "crayon", "curl", "data.table", "DBI", "dendextend", "desc", "DescTools", "deSolve", "digest", "DT", "e1071", "Ecdat", "Ecfun", "ellipse", "evaluate", "Exact", "expm", "extrafont", "FactoMineR", "fansi", "farver", "fishmethods", "flexmix", "fontawesome", "foreign", "fpc", "fs", "gdtools", "generics", "ggplot2", "ggpubr", "ggrepel", "ggsignif", "gld", "gtable", "highr", "Hmisc", "htmlTable", "htmlwidgets", "httpuv", "isoband", "jpeg", "jsonlite", "kernlab", "knitr", "ks", "latticeExtra", "lme4", "lmom", "locfit", "lpSolve", "magrittr", "maptools", "markdown", "MASS", "Matrix", "MatrixModels", "mgcv", "minqa", "nlme", "nloptr", "nnet", "openssl", "pbkrtest", "pcaPP", "pillar", "pkgload", "plyr", "png", "pracma", "processx", "proxy", "ps", "quantreg", "rainbow", "raster", "Rcapture", "Rcpp", "RcppEigen", "RcppParallel", "RCurl", "rgl", "rmarkdown", "RNifti", "rpart", "rpart.plot", "rprojroot", "rrcov", "rstatix", "rstudioapi", "Rttf2pt1", "s2", "sass", "scatterplot3d", "secr", "sf", "sourcetools", "sp", "spatial", "stringi", "stringr", "survival", "sys", "terra", "testthat", "tibble", "tidyr", "tinytex", "units", "utf8", "viridisLite", "vroom", "wk", "xfun", "XML", "yaml", "zoo"))
install.packages(c("BH", "bit", "boot", "broom", "bslib", "callr", "car", "checkmate", "class", "classInt", "codetools", "colorspace", "cpp11", "crayon", "curl", "data.table", "DBI", "dendextend", "desc", "DescTools", "deSolve", "digest", "DT", "e1071", "Ecdat", "Ecfun", "ellipse", "evaluate", "Exact", "expm", "extrafont", "FactoMineR", "fansi", "farver", "fishmethods", "flexmix", "fontawesome", "foreign", "fpc", "fs", "gdtools", "generics", "ggplot2", "ggpubr", "ggrepel", "ggsignif", "gld", "gtable", "highr", "Hmisc", "htmlTable", "htmlwidgets", "httpuv", "isoband", "jpeg", "jsonlite", "kernlab", "knitr", "ks", "latticeExtra", "lme4", "lmom", "locfit", "lpSolve", "magrittr", "maptools", "markdown", "MASS", "Matrix", "MatrixModels", "mgcv", "minqa", "nlme", "nloptr", "nnet", "openssl", "pbkrtest", "pcaPP", "pillar", "pkgload", "plyr", "png", "pracma", "processx", "proxy", "ps", "quantreg", "rainbow", "raster", "Rcapture", "Rcpp", "RcppEigen", "RcppParallel", "RCurl", "rgl", "rmarkdown", "RNifti", "rpart", "rpart.plot", "rprojroot", "rrcov", "rstatix", "rstudioapi", "Rttf2pt1", "s2", "sass", "scatterplot3d", "secr", "sf", "sourcetools", "sp", "spatial", "stringi", "stringr", "survival", "sys", "terra", "testthat", "tibble", "tidyr", "tinytex", "units", "utf8", "viridisLite", "vroom", "wk", "xfun", "XML", "yaml", "zoo"))
install.packages(c("BH", "bit", "boot", "broom", "bslib", "callr", "car", "checkmate", "class", "classInt", "codetools", "colorspace", "cpp11", "crayon", "curl", "data.table", "DBI", "dendextend", "desc", "DescTools", "deSolve", "digest", "DT", "e1071", "Ecdat", "Ecfun", "ellipse", "evaluate", "Exact", "expm", "extrafont", "FactoMineR", "fansi", "farver", "fishmethods", "flexmix", "fontawesome", "foreign", "fpc", "fs", "gdtools", "generics", "ggplot2", "ggpubr", "ggrepel", "ggsignif", "gld", "gtable", "highr", "Hmisc", "htmlTable", "htmlwidgets", "httpuv", "isoband", "jpeg", "jsonlite", "kernlab", "knitr", "ks", "latticeExtra", "lme4", "lmom", "locfit", "lpSolve", "magrittr", "maptools", "markdown", "MASS", "Matrix", "MatrixModels", "mgcv", "minqa", "nlme", "nloptr", "nnet", "openssl", "pbkrtest", "pcaPP", "pillar", "pkgload", "plyr", "png", "pracma", "processx", "proxy", "ps", "quantreg", "rainbow", "raster", "Rcapture", "Rcpp", "RcppEigen", "RcppParallel", "RCurl", "rgl", "rmarkdown", "RNifti", "rpart", "rpart.plot", "rprojroot", "rrcov", "rstatix", "rstudioapi", "Rttf2pt1", "s2", "sass", "scatterplot3d", "secr", "sf", "sourcetools", "sp", "spatial", "stringi", "stringr", "survival", "sys", "terra", "testthat", "tibble", "tidyr", "tinytex", "units", "utf8", "viridisLite", "vroom", "wk", "xfun", "XML", "yaml", "zoo"))
install.packages(c("BH", "bit", "boot", "broom", "bslib", "callr", "car", "checkmate", "class", "classInt", "codetools", "colorspace", "cpp11", "crayon", "curl", "data.table", "DBI", "dendextend", "desc", "DescTools", "deSolve", "digest", "DT", "e1071", "Ecdat", "Ecfun", "ellipse", "evaluate", "Exact", "expm", "extrafont", "FactoMineR", "fansi", "farver", "fishmethods", "flexmix", "fontawesome", "foreign", "fpc", "fs", "gdtools", "generics", "ggplot2", "ggpubr", "ggrepel", "ggsignif", "gld", "gtable", "highr", "Hmisc", "htmlTable", "htmlwidgets", "httpuv", "isoband", "jpeg", "jsonlite", "kernlab", "knitr", "ks", "latticeExtra", "lme4", "lmom", "locfit", "lpSolve", "magrittr", "maptools", "markdown", "MASS", "Matrix", "MatrixModels", "mgcv", "minqa", "nlme", "nloptr", "nnet", "openssl", "pbkrtest", "pcaPP", "pillar", "pkgload", "plyr", "png", "pracma", "processx", "proxy", "ps", "quantreg", "rainbow", "raster", "Rcapture", "Rcpp", "RcppEigen", "RcppParallel", "RCurl", "rgl", "rmarkdown", "RNifti", "rpart", "rpart.plot", "rprojroot", "rrcov", "rstatix", "rstudioapi", "Rttf2pt1", "s2", "sass", "scatterplot3d", "secr", "sf", "sourcetools", "sp", "spatial", "stringi", "stringr", "survival", "sys", "terra", "testthat", "tibble", "tidyr", "tinytex", "units", "utf8", "viridisLite", "vroom", "wk", "xfun", "XML", "yaml", "zoo"))
install.packages(c("BH", "bit", "boot", "broom", "bslib", "callr", "car", "checkmate", "class", "classInt", "codetools", "colorspace", "cpp11", "crayon", "curl", "data.table", "DBI", "dendextend", "desc", "DescTools", "deSolve", "digest", "DT", "e1071", "Ecdat", "Ecfun", "ellipse", "evaluate", "Exact", "expm", "extrafont", "FactoMineR", "fansi", "farver", "fishmethods", "flexmix", "fontawesome", "foreign", "fpc", "fs", "gdtools", "generics", "ggplot2", "ggpubr", "ggrepel", "ggsignif", "gld", "gtable", "highr", "Hmisc", "htmlTable", "htmlwidgets", "httpuv", "isoband", "jpeg", "jsonlite", "kernlab", "knitr", "ks", "latticeExtra", "lme4", "lmom", "locfit", "lpSolve", "magrittr", "maptools", "markdown", "MASS", "Matrix", "MatrixModels", "mgcv", "minqa", "nlme", "nloptr", "nnet", "openssl", "pbkrtest", "pcaPP", "pillar", "pkgload", "plyr", "png", "pracma", "processx", "proxy", "ps", "quantreg", "rainbow", "raster", "Rcapture", "Rcpp", "RcppEigen", "RcppParallel", "RCurl", "rgl", "rmarkdown", "RNifti", "rpart", "rpart.plot", "rprojroot", "rrcov", "rstatix", "rstudioapi", "Rttf2pt1", "s2", "sass", "scatterplot3d", "secr", "sf", "sourcetools", "sp", "spatial", "stringi", "stringr", "survival", "sys", "terra", "testthat", "tibble", "tidyr", "tinytex", "units", "utf8", "viridisLite", "vroom", "wk", "xfun", "XML", "yaml", "zoo"))
install.packages(c("BH", "bit", "boot", "broom", "bslib", "callr", "car", "checkmate", "class", "classInt", "codetools", "colorspace", "cpp11", "crayon", "curl", "data.table", "DBI", "dendextend", "desc", "DescTools", "deSolve", "digest", "DT", "e1071", "Ecdat", "Ecfun", "ellipse", "evaluate", "Exact", "expm", "extrafont", "FactoMineR", "fansi", "farver", "fishmethods", "flexmix", "fontawesome", "foreign", "fpc", "fs", "gdtools", "generics", "ggplot2", "ggpubr", "ggrepel", "ggsignif", "gld", "gtable", "highr", "Hmisc", "htmlTable", "htmlwidgets", "httpuv", "isoband", "jpeg", "jsonlite", "kernlab", "knitr", "ks", "latticeExtra", "lme4", "lmom", "locfit", "lpSolve", "magrittr", "maptools", "markdown", "MASS", "Matrix", "MatrixModels", "mgcv", "minqa", "nlme", "nloptr", "nnet", "openssl", "pbkrtest", "pcaPP", "pillar", "pkgload", "plyr", "png", "pracma", "processx", "proxy", "ps", "quantreg", "rainbow", "raster", "Rcapture", "Rcpp", "RcppEigen", "RcppParallel", "RCurl", "rgl", "rmarkdown", "RNifti", "rpart", "rpart.plot", "rprojroot", "rrcov", "rstatix", "rstudioapi", "Rttf2pt1", "s2", "sass", "scatterplot3d", "secr", "sf", "sourcetools", "sp", "spatial", "stringi", "stringr", "survival", "sys", "terra", "testthat", "tibble", "tidyr", "tinytex", "units", "utf8", "viridisLite", "vroom", "wk", "xfun", "XML", "yaml", "zoo"))
install.packages(c("BH", "bit", "boot", "broom", "bslib", "callr", "car", "checkmate", "class", "classInt", "codetools", "colorspace", "cpp11", "crayon", "curl", "data.table", "DBI", "dendextend", "desc", "DescTools", "deSolve", "digest", "DT", "e1071", "Ecdat", "Ecfun", "ellipse", "evaluate", "Exact", "expm", "extrafont", "FactoMineR", "fansi", "farver", "fishmethods", "flexmix", "fontawesome", "foreign", "fpc", "fs", "gdtools", "generics", "ggplot2", "ggpubr", "ggrepel", "ggsignif", "gld", "gtable", "highr", "Hmisc", "htmlTable", "htmlwidgets", "httpuv", "isoband", "jpeg", "jsonlite", "kernlab", "knitr", "ks", "latticeExtra", "lme4", "lmom", "locfit", "lpSolve", "magrittr", "maptools", "markdown", "MASS", "Matrix", "MatrixModels", "mgcv", "minqa", "nlme", "nloptr", "nnet", "openssl", "pbkrtest", "pcaPP", "pillar", "pkgload", "plyr", "png", "pracma", "processx", "proxy", "ps", "quantreg", "rainbow", "raster", "Rcapture", "Rcpp", "RcppEigen", "RcppParallel", "RCurl", "rgl", "rmarkdown", "RNifti", "rpart", "rpart.plot", "rprojroot", "rrcov", "rstatix", "rstudioapi", "Rttf2pt1", "s2", "sass", "scatterplot3d", "secr", "sf", "sourcetools", "sp", "spatial", "stringi", "stringr", "survival", "sys", "terra", "testthat", "tibble", "tidyr", "tinytex", "units", "utf8", "viridisLite", "vroom", "wk", "xfun", "XML", "yaml", "zoo"))
install.packages(c("BH", "bit", "boot", "broom", "bslib", "callr", "car", "checkmate", "class", "classInt", "codetools", "colorspace", "cpp11", "crayon", "curl", "data.table", "DBI", "dendextend", "desc", "DescTools", "deSolve", "digest", "DT", "e1071", "Ecdat", "Ecfun", "ellipse", "evaluate", "Exact", "expm", "extrafont", "FactoMineR", "fansi", "farver", "fishmethods", "flexmix", "fontawesome", "foreign", "fpc", "fs", "gdtools", "generics", "ggplot2", "ggpubr", "ggrepel", "ggsignif", "gld", "gtable", "highr", "Hmisc", "htmlTable", "htmlwidgets", "httpuv", "isoband", "jpeg", "jsonlite", "kernlab", "knitr", "ks", "latticeExtra", "lme4", "lmom", "locfit", "lpSolve", "magrittr", "maptools", "markdown", "MASS", "Matrix", "MatrixModels", "mgcv", "minqa", "nlme", "nloptr", "nnet", "openssl", "pbkrtest", "pcaPP", "pillar", "pkgload", "plyr", "png", "pracma", "processx", "proxy", "ps", "quantreg", "rainbow", "raster", "Rcapture", "Rcpp", "RcppEigen", "RcppParallel", "RCurl", "rgl", "rmarkdown", "RNifti", "rpart", "rpart.plot", "rprojroot", "rrcov", "rstatix", "rstudioapi", "Rttf2pt1", "s2", "sass", "scatterplot3d", "secr", "sf", "sourcetools", "sp", "spatial", "stringi", "stringr", "survival", "sys", "terra", "testthat", "tibble", "tidyr", "tinytex", "units", "utf8", "viridisLite", "vroom", "wk", "xfun", "XML", "yaml", "zoo"))
Sì
library(tidyverse)
library(tidyverse)
?tidyverse
a <- 3
dim(a)
len(a)
length(a)
a <- c(2,33)
length(a)
dim(a)
dim(a)
?matrix
a <- matrix(data = rep(NA, 9),nrow = 3,ncol =3)
a
a <- matrix(data = rep(1, 9),nrow = 3,ncol =3)
a
length(a)
dim(a)
# R is case-sensitive: an uppercase letter is different than the same letter lowercase
mean(c(5,7,9))
Mean(c(5,7,9))
# 0 PACCHETTI
#install.packages("tidyverse")
#install.packages("naniar")
#install.packages("reshape2")
#install.packages("heatmaply")
library(naniar)
library(tidyverse)
library(ggplot2)
library(reshape2)
library(heatmaply)
install.packages("tree")
library(tree) #lo usiamo per generare un albero
# 1 LEGGIAMO I DATI
# -- session --> set working directory --> cartella che tiene il file dati
setwd("~/Desktop/archive")
setwd("~/Desktop/laura")
airline_data = read.csv("airline_passenger_satisfaction.csv")
# 2 ESPLORIAMO IL DATASET
head(airline_data)
summary(airline_data)
# ricodifichiamo la variablile Flight Distance da miglia a km
# conversione 1 miglio = 1.60934 km
airline_data$Flight.Distance = airline_data$Flight.Distance * 1.60934
length(which(is.na(airline_data))) # ci sono 393 valori mancanti
# 2.1 TRATTIAMO I VALORI MANCANTI
# testiamo l'ipotesi che i valori mancanti siano solo nelle variabili relative alla soddisfazione
head(select(airline_data, c(12:23))) #selezioniamo solo quelle variabili(ovvero quelle realative alla soddisfazione)
length(which(is.na(select(airline_data, c(12:23)))))
# il risultato ci mostra che non sono presenti valori mancanti nella variabile relativa alla soddisfazione,
#pertanto ipotizziamo esserci valori mancanti in altre varibaili
length(which(is.na(select(airline_data, c(1:12))))) # si
gg_miss_var(airline_data) # vediamo che i valori mancanti sono nella variabile Arrival.Delay
#Come trattiamo i valori mancanti?
length(which(is.na(airline_data))) / nrow(airline_data) * 100 #la proporzione di valori mancanti è molto bassa
# se decidiamo di non ignorare i valori mancanti:
# proviamo però a vedere la correlazione tra il ritardo di arrivo e quello di partenza
plot(airline_data$Departure.Delay,airline_data$Arrival.Delay) # c'è correlazione
# c'e una piccola differenza nel tempo di arrivo, solitamente è maggiore del tempo alla partenza
summary(airline_data$Arrival.Delay)
summary(airline_data$Departure.Delay)
# possiamo quindi imputare i valori mancanti del ritardo in arrivo utilizzando
# il ritardo nella partenza e la Regression Imputation ( Regressione Lineare).
linear_model <- lm(airline_data$Arrival.Delay ~ airline_data$Departure.Delay, data=airline_data)
summary(linear_model)
b0 = linear_model$coefficients[1]
b1 = linear_model$coefficients[2]
# imputiamo tutti i ritardi in arrivo mancanti in arrivo deducendoli dai ritardi in partenza
for(i in 1:nrow(airline_data))
# imputiamo tutti i ritardi in arrivo mancanti in arrivo deducendoli dai ritardi in partenza
for(i in 1:nrow(airline_data))
{
if(is.na(airline_data$Arrival.Delay[i]))
{
airline_data$Arrival.Delay[i] = b0 + b1 * airline_data$Departure.Delay
}
}
length(which(is.na(airline_data))) # abbiamo imputato/sostituito tutti i valori mancanti di ritardo in arrivo
# 2.2 VISUALIZZAZIONE VARIABILI QUALITATIVE
# "Gender", "Customer.Type", "Class", "Satisfaction"
# Genere --> la compagnia ha piu o meno lo stesso numero di maschi e femmine come clienti
# Tipo cliente --> La maggioranza sono clienti abituali
# Class --> principalmente i clienti viaggiano in Economy e Business
# Satisfaction --> la maggioranza dei clienti sono Neutrali o Insoddisfatti
#l'obiettivo è vedere che non ci sono incongruenze nei dati (genere negativo ecc) e vedere l'andamento generale dei dati
t1 = table(airline_data$Gender) # - cambiare il codice in base alla variabile che voglio analizzare "airline_data$variabile"
t2 = prop.table(t1)*100
barplot(t2, horiz = F, legend=F, beside = T, las=1, # -- se cambiamo nel barplot t1 con t2 avremo non più dati grezzi ma percentuali (quindi t1= dati grezzi, t2 percentuale)
col = c("pink", "lightblue", "yellow", "green", "red"),
cex.axis = 0.9, cex.names = 0.7)
# 2.2 VISUALIZZAZIONE VARIABILI QUALITATIVE
# "Gender", "Customer.Type", "Class", "Satisfaction"
# Genere --> la compagnia ha piu o meno lo stesso numero di maschi e femmine come clienti
# Tipo cliente --> La maggioranza sono clienti abituali
# Class --> principalmente i clienti viaggiano in Economy e Business
# Satisfaction --> la maggioranza dei clienti sono Neutrali o Insoddisfatti
#l'obiettivo è vedere che non ci sono incongruenze nei dati (genere negativo ecc) e vedere l'andamento generale dei dati
t1 = table(airline_data$Gender) # - cambiare il codice in base alla variabile che voglio analizzare "airline_data$variabile"
t2 = prop.table(t1)*100
barplot(t2, horiz = F, legend=F, beside = T, las=1, # -- se cambiamo nel barplot t1 con t2 avremo non più dati grezzi ma percentuali (quindi t1= dati grezzi, t2 percentuale)
col = c("pink", "lightblue", "yellow", "green", "red"),
cex.axis = 0.9, cex.names = 0.7)
# Analizziamo una variabile per volta (iniziamo facendolo per la varibaile età), sostituire dopo con le altre.
variabile = airline_data$Age
# istogramma
ggplot(airline_data, aes(x = variabile)) +
geom_histogram(fill = "cornflowerblue",
color = "white",
binwidth = 5) + #5 è la fascia di età per barra, quando analizzo la varibaile "Arrivaly Delay" la cambio con 60, cosi 60 min sono un'ora. Quindi ogni barra ci porterà 1 ora.
labs(title="Età", # - da modificare a seconda delle variabili che voglio analizzare
subtitle = "ampiezza classe = 10 anni",
x = "Età")
# grafico della densità
ggplot(airline_data, aes(x = variabile)) +
geom_density(fill = "indianred3") +
labs(title = "Età") # - da modificare in base alla variabile
# boxplot
ggplot(data = airline_data, aes(y = variabile)) +
geom_boxplot() +
scale_x_discrete() +
labs(title = "Età", # - da modificare a seconda della varibaile che voglio analizzare
y = "Età")
# HEATMAP della correlazione, vediamo quali variabili sono maggiormente legate tra loro
#creo "airline_data2" per ricodificare tutte le variabili qualitative in variabili quantitative (le varibili quantitative mi servono per rappresentare l'heatmap)
airline_data2 = airline_data
#codifico le variabili qualitative che mi servono per l'heatmap
airline_data2$Satisfaction = ifelse(airline_data$Satisfaction == "Satisfied", 1,0)
airline_data2$Gender = ifelse(airline_data$Gender == "Female", 1,0)
airline_data2$Type.of.Travel = ifelse(airline_data$Type.of.Travel == "Business", 1,0)
airline_data2$Customer.Type = ifelse(airline_data$Customer.Type == "Returning", 1,0)
airline_data2$Class = ifelse(airline_data$Class == "Economy", 0,ifelse(airline_data$Class == "Economy Plus", 1, 2))
#Prima vedo la relazione tra le diverse variabili di soddisfazione
heatmaply_cor(x = cor(select(airline_data2, c(11:23))), xlab = "Features",
ylab = "Features", k_col = 2, k_row = 2)
#Stranamente non sono collegate con la distanza del volo " Flight Distance".
#Probabilmente sono collegate alla classe (Economy/Economy Plus/ Business)
which(colnames(airline_data2)=="Class") # 5
heatmaply_cor(x = cor(select(airline_data2, c(5,15,17,18,21))), xlab = "Features",
ylab = "Features", k_col = 2, k_row = 2)
#Adesso analizzo la relazione tra le altre variabili e la soddisfazione
heatmaply_cor(x = cor(select(airline_data2, c(1:7,23))), xlab = "Features",
ylab = "Features", k_col = 2, k_row = 2)
#Indichiamo la grandezza (in %) del Train Set
airline_data2 = airline_data
airline_data2$Satisfaction = factor(airline_data2$Satisfaction)
perc_train <- 0.75
NROW(airline_data2)*perc_train # perc_train = 0.75, equivale al 75% di airline_data.
nrow_train <- NROW(airline_data2)*perc_train
idx <- sample(1:NROW(airline_data2),size = nrow_train) #Genero un campione casuale pari al 75% delle osservazioni del df (data frame)
idx
# -- dividiamo i dati in Train Set 75% e Test Set 25%
train <- airline_data2[idx,] #Train set 75% (alleno il modello)
train
# Test set
test  <- airline_data2[-idx,] #Test:25% (testo  perfomance del modello).
test
#Test per valutare che il numero di passeggeri nel Test-Set più quelli nel Train-set sia uguale a quello iniziale.
nrow(train) + nrow(test)
nrow(airline_data2)
### 3) Costruiamo l'albero ####
# Alleno un albero usando come dati il Train e cercando di prevedere "Satisfaction" usando tutte le varibaili x
# Uso tutte le varibaili per prevedere se quel cliente sarà soddisfatto o meno. Tutte tranne soddisfaction)
tree1 <- tree(Satisfaction ~ ., data = train) # lo facciamo girare sul Train set
tree1
summary(tree1) #ci sono 11 nodi terminali
plot(tree1)
text(tree1, pretty = 0, cex=0.7,col="blue") # Aggiungo il testo; pretty= sta ad indicare la lunghezza delle etichette
### 4) Tabella prediction-realization su test set #### uso il nostro modello per prevedere la soddisfazione di ogni cliente (quindi usiamo il modlelo per fare previsione).
which(colnames(test)=="Satisfaction") # 23
pred <- predict(tree1, test[,-23], type="class") #Escludiamo Satisfaction che è la variabile numero 23; con type indichiamo il tipo di risultato da ottenere.
pred <- predict(tree1, test[,-23], type="class") #Escludiamo Satisfaction che è la variabile numero 23; con type indichiamo il tipo di risultato da ottenere.
pred <- predict(tree1, test[,23], type="class") #Escludiamo Satisfaction che è la variabile numero 23; con type indichiamo il tipo di risultato da ottenere.
### 4) Tabella prediction-realization su test set #### uso il nostro modello per prevedere la soddisfazione di ogni cliente (quindi usiamo il modlelo per fare previsione).
which(colnames(test)=="Satisfaction") # 23
pred <- predict(tree1, test[,-23], type="class") #Escludiamo Satisfaction che è la variabile numero 23; con type indichiamo il tipo di risultato da ottenere.
summary(tree1) #ci sono 11 nodi terminali
### 4) Tabella prediction-realization su test set #### uso il nostro modello per prevedere la soddisfazione di ogni cliente (quindi usiamo il modlelo per fare previsione).
which(colnames(test)=="Satisfaction") # 23
test[,-23]
colnames(test)
test[,1:23]
pred <- predict(tree1, test[,1:23], type="class") #Escludiamo Satisfaction che è la variabile numero 23; con type indichiamo il tipo di risultato da ottenere.
#il codice sopra ci dice che voglio fare previsione utilizzando il modello tree1 che è l'albero che abbiamo fatto prima sul Test Set che è il 25 %
#togliendo la variabile soddisfazione che è la numero 23 del dataset che rappresenta proprio la variabile che voglio analizzare.
#Scegliendo "Class" ho un fattore codificato con le classi predette, quindi sddisfatto /non soddisaftto.
pred
# Matrice di confusione
PRtab <- table(pred,test$Satisfaction)
PRtab #la matrice di confusione mi confronta i dati stimati con quelli previsti.
# accuracy del modello (quelle classificate correttamente diviso il totale)
acc <- (sum(diag(PRtab))/NROW(test))
acc #ed è tutto ciò che classifica correttamente il modello, quindi 16007+11716 (che sono nella diagonale ) diviso il totale della somma di tutti i numeri, che sono anche il totale dei passeggeri.
#quinid questo modello è accurato allo 0.85.
1- acc
# applichiamo la cross validation per fare il pruning dell'albero
cv.tree(tree1,K=10)
#Sull'asse delle ascisse sono riportati i nodi terminali; sull'asse delle ordinate il tasso di errata classificazione.
plot(cv.tree(tree1,K=10, FUN=prune.misclass) ,type="b", lwd=3,col="blue")
# Otteniamo quindi l'albero "ottimale" con 6 nodi terminali
tree2 <- prune.misclass(tree1, best = 6) #prune.misclass-> funzione per alberi di classificazione
tree2
summary(tree2)
plot(tree2)
text(tree2, pretty = 0, cex=1.2,col="blue")
#rifacciamo la previsione e ri-valutiamo l'accuracy nel nuovo albero con 6 nodi terminali
pred1 <- predict(tree2, test[,-23], type="class")
pred1
pred1
#rifacciamo la previsione e ri-valutiamo l'accuracy nel nuovo albero con 6 nodi terminali
pred1 <- predict(tree2, test[,-23], type="class")
#rifacciamo la previsione e ri-valutiamo l'accuracy nel nuovo albero con 6 nodi terminali
pred1 <- predict(tree2, test[,1:23], type="class")
pred1
#Matrice di confusione per il 'nuovo' albero (l'albero con 6 nodi terminali)
PRtab1 <- table(test$Satisfaction,pred1)
PRtab1
acc1 <- (sum(diag(PRtab1)/NROW(test)))
acc1 #Adesso l'accurancy è di 0.84 invece che 0,85. un pò peggiorato però ho semplificato il modello.
1- acc1
#Sull'asse delle ascisse sono riportati i nodi terminali; sull'asse delle ordinate il tasso di errata classificazione.
plot(cv.tree(tree1,K=10, FUN=prune.misclass) ,type="b", lwd=3,col="blue")
plot(cv.tree(tree1,K=10, FUN=prune.misclass) ,type="b", lwd=3,col="blue")
## Nuova libreria e nuovo metodo che mi permette di visualizzare l'importanza delle variabili,
##ovvero le variabili che sono piu associate alla soddisfazione.
######## rpart package per vedere l'importanza delle variabili
# install.packages("rpart")
library(rpart)
# Funzione per creare l'albero a partire dal Training Set
tree_model = rpart(Satisfaction ~ ., data = train, method="class")
# Importnaza delle variabili. Quindi piu il numero relatiivo alla varabile è alto e piu influisce sulle nostre osservazioni.
tree_model$variable.importance
# Visualizziamo graficamente l'importanza delle variabili
library(tidyverse)
df <- data.frame(imp = tree_model$variable.importance)
df2 <- df %>%
tibble::rownames_to_column() %>%
dplyr::rename("variable" = rowname) %>%
dplyr::arrange(imp) %>%
dplyr::mutate(variable = forcats::fct_inorder(variable))
ggplot2::ggplot(df2) +
geom_col(aes(x = variable, y = imp),
col = "black", show.legend = F) +
coord_flip() +
scale_fill_grey() +
theme_bw()
# Output dell' albero
print(tree_model)
#Indice di complessità dell'albero
#più il CP è alto più ci conviene continuare a ramificare l'albero. Un altro modo per vedere se ho fatto bene il prooning.
printcp(tree_model) #quanti piu slip facciamo piu l'indice di complessitò diminuisce. Vedo che da 5 a 8 non cambia nulla .
# Grafico
# install.packages("rattle")
library(rattle)
library(rpart.plot)
library(RColorBrewer)
fancyRpartPlot(tree_model)
# Cross validation per vedere il parametro CP(complessità) all'aumentare della grandezza dell'albero
#ovvero al numero di nodi terminali, cioè piu faccio diviisoni/split piu l'albero è grande.
plotcp(tree_model)
# Prune usando il cp di solito si usano valori tra 0.01 e 0.02 più lo scegliamo alto, meno divisioni permettiamo
prune_tree = prune(tree_model, cp= 0.02)
plotcp(prune_tree)
pred2 <- predict(tree_model, test[,-23], type="class") #Escludo Satisfaction che è la variabile numero 23; con type indico il tipo di risultato da ottenere.
pred2 <- predict(tree_model, test[,1:23], type="class") #Escludo Satisfaction che è la variabile numero 23; con type indico il tipo di risultato da ottenere.
pred2
PRtab2 <- table(pred2,test$Satisfaction)
PRtab2
acc2 <- (sum(diag(PRtab2)/NROW(test)))
acc2
setwd("~/Documents/GitHub/Briscola-Game")
